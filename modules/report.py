import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import io
import base64
from datetime import datetime
import numpy as np
from database_helper import get_all_questions, get_user_submissions, get_all_users

def format_date(date_value):
    """ƒê·ªãnh d·∫°ng ng√†y th√°ng t·ª´ nhi·ªÅu ki·ªÉu d·ªØ li·ªáu kh√°c nhau"""
    if not date_value:
        return "N/A"
    
    try:
        # N·∫øu l√† s·ªë nguy√™n (timestamp)
        if isinstance(date_value, (int, float)):
            return datetime.fromtimestamp(date_value).strftime("%d/%m/%Y")
        
        # N·∫øu l√† chu·ªói ISO (t·ª´ Supabase)
        elif isinstance(date_value, str):
            try:
                # Th·ª≠ parse chu·ªói ISO
                dt = datetime.fromisoformat(date_value.replace('Z', '+00:00'))
                return dt.strftime("%d/%m/%Y")
            except:
                # N·∫øu kh√¥ng ph·∫£i ISO, tr·∫£ v·ªÅ nguy√™n b·∫£n
                return date_value
        
        # N·∫øu ƒë√£ l√† ƒë·ªëi t∆∞·ª£ng datetime
        elif isinstance(date_value, datetime):
            return date_value.strftime("%d/%m/%Y")
            
        # C√°c tr∆∞·ªùng h·ª£p kh√°c, tr·∫£ v·ªÅ d·∫°ng chu·ªói
        else:
            return str(date_value)
    except Exception as e:
        print(f"Error formatting date: {e}, value type: {type(date_value)}, value: {date_value}")
        return "N/A"

def get_download_link(df, filename, text):
    """T·∫°o link t·∫£i xu·ªëng cho DataFrame"""
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()  # M√£ h√≥a string th√†nh base64
    href = f'<a href="data:file/csv;base64,{b64}" download="{filename}">üì• {text}</a>'
    return href

def export_to_excel(dataframes, sheet_names, filename):
    """T·∫°o file Excel v·ªõi nhi·ªÅu sheet t·ª´ c√°c DataFrame"""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        for df, sheet_name in zip(dataframes, sheet_names):
            df.to_excel(writer, sheet_name=sheet_name, index=False)
    
    data = output.getvalue()
    b64 = base64.b64encode(data).decode()
    href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{filename}">üì• {filename}</a>'
    return href

def view_statistics():
    st.title("üìä B√°o c√°o & th·ªëng k√™")
    
    # L·∫•y d·ªØ li·ªáu t·ª´ database
    questions = get_all_questions()
    submissions = get_user_submissions()
    students = get_all_users(role="H·ªçc vi√™n")
    
    if not questions:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu c√¢u h·ªèi n√†o trong h·ªá th·ªëng.")
        return
    
    if not submissions:
        st.warning("Ch∆∞a c√≥ ai n·ªôp kh·∫£o s√°t.")
        return
    
    # T·∫°o tab th·ªëng k√™
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["T·ªïng quan", "Theo h·ªçc vi√™n", "Theo c√¢u h·ªèi", "Danh s√°ch h·ªçc vi√™n", "Xu·∫•t b√°o c√°o"])
    
    # --- D·ªØ li·ªáu chung ---
    max_possible = sum([q["score"] for q in questions])
    
    # Chu·∫©n b·ªã DataFrame cho b√°o c√°o
    all_submission_data = []
    for s in submissions:
        # T√¨m th√¥ng tin h·ªçc vi√™n
        student_info = next((student for student in students if student["email"] == s["user_email"]), None)
        full_name = student_info["full_name"] if student_info else "Kh√¥ng x√°c ƒë·ªãnh"
        class_name = student_info["class"] if student_info else "Kh√¥ng x√°c ƒë·ªãnh"
        
        # Th√™m th√¥ng tin c∆° b·∫£n
        submission_data = {
            "ID": s["id"],
            "Email": s["user_email"],
            "H·ªç v√† t√™n": full_name,
            "L·ªõp": class_name,
            "Th·ªùi gian n·ªôp": datetime.fromtimestamp(s["timestamp"]).strftime("%d/%m/%Y %H:%M:%S"),
            "ƒêi·ªÉm s·ªë": s["score"],
            "ƒêi·ªÉm t·ªëi ƒëa": max_possible,
            "T·ª∑ l·ªá ƒë√∫ng": f"{(s['score']/max_possible*100):.1f}%"
        }
        
        # Th√™m c√¢u tr·∫£ l·ªùi c·ªßa t·ª´ng c√¢u h·ªèi
        for q in questions:
            q_id = str(q["id"])
            user_ans = s["responses"].get(q_id, [])
            expected = [q["answers"][i - 1] for i in q["correct"]]
            is_correct = set(user_ans) == set(expected)
            
            # Th√™m th√¥ng tin c√¢u h·ªèi
            submission_data[f"C√¢u {q_id}: {q['question']}"] = ", ".join(user_ans) if user_ans else "Kh√¥ng tr·∫£ l·ªùi"
            submission_data[f"C√¢u {q_id} - ƒê√∫ng/Sai"] = "ƒê√∫ng" if is_correct else "Sai"
        
        all_submission_data.append(submission_data)
    
    # DataFrame ch·ª©a t·∫•t c·∫£ b√†i n·ªôp
    df_all_submissions = pd.DataFrame(all_submission_data)
    
    with tab1:
        st.subheader("T·ªïng quan k·∫øt qu·∫£")
        
        # Th·ªëng k√™ c∆° b·∫£n
        total_submissions = len(submissions)
        avg_score = sum([s["score"] for s in submissions]) / total_submissions if total_submissions > 0 else 0
        max_score = max([s["score"] for s in submissions]) if submissions else 0
        total_users = len(set([s["user_email"] for s in submissions]))
        
        # Hi·ªÉn th·ªã metrics
        col1, col2, col3 = st.columns(3)
        col1.metric("üìù T·ªïng s·ªë b√†i n·ªôp", total_submissions)
        col1.metric("üë• S·ªë h·ªçc vi√™n ƒë√£ l√†m", total_users)
        
        col2.metric("üìä ƒêi·ªÉm trung b√¨nh", f"{avg_score:.2f}/{max_possible}")
        col2.metric("üèÜ ƒêi·ªÉm cao nh·∫•t", f"{max_score}/{max_possible}")
        
        col3.metric("üìã S·ªë c√¢u h·ªèi", len(questions))
        col3.metric("üë®‚Äçüéì T·ªïng s·ªë h·ªçc vi√™n", len(students))
        
        # Bi·ªÉu ƒë·ªì ƒëi·ªÉm s·ªë theo th·ªùi gian
        st.subheader("ƒêi·ªÉm s·ªë theo th·ªùi gian")
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu
        time_data = []
        for s in submissions:
            time_data.append({
                "timestamp": datetime.fromtimestamp(s["timestamp"]),
                "score": s["score"],
                "user": s["user_email"]
            })
        
        if time_data:
            df_time = pd.DataFrame(time_data)
            df_time = df_time.sort_values("timestamp")
            
            # V·∫Ω bi·ªÉu ƒë·ªì
            fig, ax = plt.subplots(figsize=(10, 5))
            ax.plot(df_time["timestamp"], df_time["score"], marker='o')
            ax.set_ylabel("ƒêi·ªÉm s·ªë")
            ax.set_xlabel("Th·ªùi gian n·ªôp b√†i")
            ax.grid(True, linestyle='--', alpha=0.7)
            
            # Gi·∫£m s·ªë l∆∞·ª£ng tick tr√™n tr·ª•c x
            max_ticks = 6
            if len(df_time) > max_ticks:
                stride = len(df_time) // max_ticks
                plt.xticks(df_time["timestamp"][::stride])
            
            plt.tight_layout()  # ƒê·∫£m b·∫£o kh√¥ng b·ªã c·∫Øt ch·ªØ
            st.pyplot(fig)
        
        # Hi·ªÉn th·ªã ph√¢n ph·ªëi ƒëi·ªÉm
        st.subheader("Ph√¢n ph·ªëi ƒëi·ªÉm s·ªë")
        if submissions:
            scores = [s["score"] for s in submissions]
            fig, ax = plt.subplots(figsize=(10, 5))
            ax.hist(scores, bins=min(10, len(set(scores))), alpha=0.7, color='skyblue', edgecolor='black')
            ax.set_xlabel("ƒêi·ªÉm s·ªë")
            ax.set_ylabel("S·ªë l∆∞·ª£ng b√†i n·ªôp")
            ax.grid(True, linestyle='--', alpha=0.3)
            plt.tight_layout()
            st.pyplot(fig)
    
    with tab2:
        st.subheader("Chi ti·∫øt theo h·ªçc vi√™n")
        
        # T·∫°o DataFrame t·ª´ d·ªØ li·ªáu
        user_data = []
        for s in submissions:
            # T√¨m th√¥ng tin h·ªçc vi√™n
            student_info = next((student for student in students if student["email"] == s["user_email"]), None)
            full_name = student_info["full_name"] if student_info else "Kh√¥ng x√°c ƒë·ªãnh"
            class_name = student_info["class"] if student_info else "Kh√¥ng x√°c ƒë·ªãnh"
            
            user_data.append({
                "email": s["user_email"],
                "full_name": full_name,
                "class": class_name,
                "submission_id": s["id"],
                "timestamp": datetime.fromtimestamp(s["timestamp"]).strftime("%H:%M:%S %d/%m/%Y"),
                "score": s["score"],
                "max_score": max_possible,
                "percent": f"{(s['score']/max_possible*100):.1f}%"
            })
        
        if user_data:
            df_users = pd.DataFrame(user_data)
            
            # L·ªçc theo email ho·∫∑c l·ªõp
            col1, col2 = st.columns(2)
            with col1:
                user_filter = st.selectbox(
                    "Ch·ªçn h·ªçc vi√™n ƒë·ªÉ xem chi ti·∫øt:",
                    options=["T·∫•t c·∫£"] + sorted(list(set([u["email"] for u in user_data]))),
                    key="user_filter_tab2"
                )
            
            with col2:
                class_filter = st.selectbox(
                    "L·ªçc theo l·ªõp:",
                    options=["T·∫•t c·∫£"] + sorted(list(set([u["class"] for u in user_data if u["class"] != "Kh√¥ng x√°c ƒë·ªãnh"]))),
                    key="class_filter_tab2"
                )
            
            # √Åp d·ª•ng b·ªô l·ªçc
            df_filtered = df_users
            
            if user_filter != "T·∫•t c·∫£":
                df_filtered = df_filtered[df_filtered["email"] == user_filter]
            
            if class_filter != "T·∫•t c·∫£":
                df_filtered = df_filtered[df_filtered["class"] == class_filter]
            
            # Hi·ªÉn th·ªã b·∫£ng
            st.dataframe(
                df_filtered.sort_values(by="timestamp", ascending=False),
                use_container_width=True,
                hide_index=True,
                column_order=["full_name", "class", "email", "score", "percent", "timestamp"]
            )
            
            # Xem chi ti·∫øt m·ªôt b√†i n·ªôp c·ª• th·ªÉ
            if user_filter != "T·∫•t c·∫£":
                submission_ids = df_filtered["submission_id"].tolist()
                if submission_ids:
                    selected_submission = st.selectbox(
                        "Ch·ªçn b√†i n·ªôp ƒë·ªÉ xem chi ti·∫øt:",
                        options=submission_ids,
                        key="submission_id_select"
                    )
                    
                    # T√¨m b√†i n·ªôp ƒë∆∞·ª£c ch·ªçn
                    submission = next((s for s in submissions if s["id"] == selected_submission), None)
                    if submission:
                        st.subheader(f"Chi ti·∫øt b√†i n·ªôp #{selected_submission}")
                        
                        total_correct = 0
                        total_questions = len(questions)
                        
                        # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi chi ti·∫øt
                        for q in questions:
                            q_id = str(q["id"])
                            st.write(f"**C√¢u {q['id']}: {q['question']}**")
                            
                            # ƒê√°p √°n ng∆∞·ªùi d√πng
                            user_ans = submission["responses"].get(q_id, [])
                            expected = [q["answers"][i - 1] for i in q["correct"]]
                            
                            # Ki·ªÉm tra ƒë√∫ng/sai
                            is_correct = set(user_ans) == set(expected)
                            if is_correct:
                                total_correct += 1
                            
                            # Hi·ªÉn th·ªã ƒë√°p √°n c·ªßa ng∆∞·ªùi d√πng
                            st.write("ƒê√°p √°n c·ªßa h·ªçc vi√™n:")
                            if not user_ans:
                                st.write("- Kh√¥ng tr·∫£ l·ªùi")
                            else:
                                for ans in user_ans:
                                    st.write(f"- {ans}")
                            
                            # Hi·ªÉn th·ªã k·∫øt qu·∫£
                            if is_correct:
                                st.success(f"‚úÖ ƒê√∫ng (+{q['score']} ƒëi·ªÉm)")
                            else:
                                st.error("‚ùå Sai (0 ƒëi·ªÉm)")
                                st.write("ƒê√°p √°n ƒë√∫ng:")
                                for ans in expected:
                                    st.write(f"- {ans}")
                            
                            st.divider()
                            
                        # Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng h·ª£p
                        st.subheader("T·ªïng k·∫øt")
                        col1, col2, col3 = st.columns(3)
                        col1.metric("S·ªë c√¢u ƒë√∫ng", f"{total_correct}/{total_questions}")
                        col2.metric("ƒêi·ªÉm s·ªë", f"{submission['score']}/{max_possible}")
                        col3.metric("T·ª∑ l·ªá ƒë√∫ng", f"{(total_correct/total_questions*100):.1f}%")
                        
                        # Xu·∫•t b√°o c√°o c√° nh√¢n
                        st.write("### Xu·∫•t b√°o c√°o c√° nh√¢n")
                        
                        # T·∫°o DataFrame cho b√°o c√°o c·ªßa h·ªçc vi√™n n√†y
                        student_submission = next((s for s in all_submission_data if s["ID"] == selected_submission), None)
                        if student_submission:
                            df_student = pd.DataFrame([student_submission])
                            st.markdown(get_download_link(df_student, f"bao_cao_hoc_vien_{submission['user_email']}.csv", 
                                                        "T·∫£i xu·ªëng b√°o c√°o chi ti·∫øt (CSV)"), unsafe_allow_html=True)
    
    with tab3:
        st.subheader("Ph√¢n t√≠ch theo c√¢u h·ªèi")
        
        # Th·ªëng k√™ t·ª∑ l·ªá ƒë√∫ng/sai cho t·ª´ng c√¢u h·ªèi
        question_stats = {}
        
        for q in questions:
            q_id = str(q["id"])
            correct_count = 0
            wrong_count = 0
            skip_count = 0
            
            for s in submissions:
                user_ans = s["responses"].get(q_id, [])
                expected = [q["answers"][i - 1] for i in q["correct"]]
                
                if not user_ans:
                    skip_count += 1
                elif set(user_ans) == set(expected):
                    correct_count += 1
                else:
                    wrong_count += 1
            
            question_stats[q_id] = {
                "question": q["question"],
                "correct": correct_count,
                "wrong": wrong_count,
                "skip": skip_count,
                "total": correct_count + wrong_count + skip_count,
                "correct_rate": correct_count / (correct_count + wrong_count + skip_count) if (correct_count + wrong_count + skip_count) > 0 else 0
            }
        
        # DataFrame th·ªëng k√™ c√¢u h·ªèi
        df_questions = pd.DataFrame([
            {
                "C√¢u h·ªèi ID": q_id,
                "N·ªôi dung": stats["question"],
                "S·ªë l∆∞·ª£ng ƒë√∫ng": stats["correct"],
                "S·ªë l∆∞·ª£ng sai": stats["wrong"],
                "B·ªè qua": stats["skip"],
                "T·ªïng s·ªë l√†m": stats["total"],
                "T·ª∑ l·ªá ƒë√∫ng (%)": f"{stats['correct_rate']*100:.1f}%"
            }
            for q_id, stats in question_stats.items()
        ])
        
        # V·∫Ω bi·ªÉu ƒë·ªì t·ª∑ l·ªá ƒë√∫ng theo t·ª´ng c√¢u h·ªèi
        q_ids = list(question_stats.keys())
        correct_rates = [question_stats[q_id]["correct_rate"] * 100 for q_id in q_ids]
        
        # T·∫°o bi·ªÉu ƒë·ªì v·ªõi k√≠ch th∆∞·ªõc nh·ªè h∆°n
        fig, ax = plt.subplots(figsize=(10, 4))
        bars = ax.bar(q_ids, correct_rates, color='skyblue')
        
        # Th√™m nh√£n gi√° tr·ªã
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 1,
                    f'{height:.1f}%', ha='center', va='bottom', fontsize=9)
        
        ax.set_ylim(0, 105)  # Gi·ªõi h·∫°n tr·ª•c y t·ª´ 0-100%
        ax.set_xlabel("C√¢u h·ªèi")
        ax.set_ylabel("T·ª∑ l·ªá ƒë√∫ng (%)")
        ax.set_title("T·ª∑ l·ªá tr·∫£ l·ªùi ƒë√∫ng theo t·ª´ng c√¢u h·ªèi")
        ax.grid(axis='y', linestyle='--', alpha=0.7)
        plt.tight_layout()
        st.pyplot(fig)
        
        # Hi·ªÉn th·ªã b·∫£ng th·ªëng k√™
        st.dataframe(df_questions, use_container_width=True, hide_index=True)
        
        # Chi ti·∫øt t·ª´ng c√¢u h·ªèi
        selected_question = st.selectbox(
            "Ch·ªçn c√¢u h·ªèi ƒë·ªÉ xem chi ti·∫øt:",
            options=[(f"C√¢u {q_id}: {question_stats[q_id]['question']}") for q_id in q_ids],
            key="question_select_tab3"
        )
        
        if selected_question:
            q_id = selected_question.split(":")[0].replace("C√¢u ", "").strip()
            q_data = question_stats[q_id]
            q_detail = next((q for q in questions if str(q["id"]) == q_id), None)
            
            if q_detail:
                st.write(f"**{selected_question}**")
                
                # Hi·ªÉn th·ªã th·ªëng k√™
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("‚úÖ ƒê√∫ng", q_data["correct"])
                col2.metric("‚ùå Sai", q_data["wrong"])
                col3.metric("‚è≠Ô∏è B·ªè qua", q_data["skip"])
                col4.metric("üìä T·ª∑ l·ªá ƒë√∫ng", f"{q_data['correct_rate']*100:.1f}%")
                
                # T·∫°o bi·ªÉu ƒë·ªì tr√≤n nh·ªè h∆°n
                fig, ax = plt.subplots(figsize=(6, 4))
                
                # S·ª≠ d·ª•ng bi·ªÉu ƒë·ªì ƒë∆°n gi·∫£n v·ªõi nh√£n v√† t·ª∑ l·ªá b√™n ngo√†i
                labels = ['ƒê√∫ng', 'Sai', 'B·ªè qua']
                sizes = [q_data["correct"], q_data["wrong"], q_data["skip"]]
                colors = ['#4CAF50', '#F44336', '#9E9E9E']
                
                # Ch·ªâ hi·ªÉn th·ªã ph·∫ßn trƒÉm n·∫øu gi√° tr·ªã > 0
                patches, texts, autotexts = ax.pie(
                    sizes, 
                    labels=None,  # Kh√¥ng hi·ªÉn th·ªã nh√£n tr√™n bi·ªÉu ƒë·ªì
                    colors=colors, 
                    autopct=lambda p: f'{p:.1f}%' if p > 0 else '',
                    startangle=90,
                    pctdistance=0.85  # ƒê·∫∑t ph·∫ßn trƒÉm g·∫ßn h∆°n v·ªõi trung t√¢m
                )
                
                # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc font nh·ªè h∆°n
                for autotext in autotexts:
                    autotext.set_fontsize(9)
                
                # Th√™m ch√∫ th√≠ch b√™n ngo√†i bi·ªÉu ƒë·ªì
                ax.legend(labels, loc="upper right", fontsize=9)
                
                # V·∫Ω v√≤ng tr√≤n tr·∫Øng ·ªü gi·ªØa
                centre_circle = plt.Circle((0, 0), 0.5, fc='white')
                ax.add_patch(centre_circle)
                
                ax.axis('equal')  # Gi·ªØ t·ª∑ l·ªá v√≤ng tr√≤n
                plt.tight_layout()
                st.pyplot(fig)
                
                # Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng
                st.write("**ƒê√°p √°n ƒë√∫ng:**")
                for i in q_detail["correct"]:
                    st.write(f"- {q_detail['answers'][i-1]}")
    
    with tab4:
        st.subheader("Danh s√°ch h·ªçc vi√™n")
        
        if not students:
            st.info("Ch∆∞a c√≥ h·ªçc vi√™n n√†o ƒëƒÉng k√Ω")
        else:
            # Chu·∫©n b·ªã d·ªØ li·ªáu
            student_data = []
            for student in students:
                # T√¨m t·∫•t c·∫£ b√†i n·ªôp c·ªßa h·ªçc vi√™n
                student_submissions = [s for s in submissions if s["user_email"] == student["email"]]
                submission_count = len(student_submissions)
                
                # T√¨m ƒëi·ªÉm cao nh·∫•t
                max_student_score = max([s["score"] for s in student_submissions]) if student_submissions else 0
                
                # Th·ªùi gian ƒëƒÉng k√Ω
                registration_date = format_date(student.get("registration_date"))
                
                student_data.append({
                    "full_name": student["full_name"],
                    "email": student["email"],
                    "class": student["class"],
                    "registration_date": registration_date,
                    "submission_count": submission_count,
                    "max_score": max_student_score,
                    "max_possible": max_possible,
                    "percent": f"{(max_student_score/max_possible*100):.1f}%" if max_possible > 0 else "N/A"
                })
            
            # DataFrame cho danh s√°ch h·ªçc vi√™n
            df_students_list = pd.DataFrame([
                {
                    "H·ªç v√† t√™n": s["full_name"],
                    "Email": s["email"],
                    "L·ªõp": s["class"],
                    "Ng√†y ƒëƒÉng k√Ω": s["registration_date"],
                    "S·ªë l·∫ßn l√†m b√†i": s["submission_count"],
                    "ƒêi·ªÉm cao nh·∫•t": s["max_score"],
                    "ƒêi·ªÉm t·ªëi ƒëa": s["max_possible"],
                    "T·ª∑ l·ªá ƒë√∫ng": s["percent"]
                } for s in student_data
            ])
            
            # L·ªçc theo l·ªõp
            class_filter = st.selectbox(
                "L·ªçc theo l·ªõp:",
                options=["T·∫•t c·∫£"] + sorted(list(set([s["class"] for s in student_data if s["class"]]))),
                key="class_filter_tab4"
            )
            
            df_students = pd.DataFrame(student_data)
            
            if class_filter != "T·∫•t c·∫£":
                df_students = df_students[df_students["class"] == class_filter]
            
            # S·∫Øp x·∫øp theo t√™n
            df_students = df_students.sort_values(by="full_name")
            
            # Hi·ªÉn th·ªã b·∫£ng
            st.dataframe(
                df_students,
                use_container_width=True,
                hide_index=True,
                column_order=["full_name", "class", "email", "submission_count", "max_score", "percent", "registration_date"]
            )
            
            # Th·ªëng k√™ theo l·ªõp
            st.subheader("Th·ªëng k√™ theo l·ªõp")
            
            # Nh√≥m theo l·ªõp
            class_stats = df_students.groupby("class").agg({
                "email": "count",
                "submission_count": "sum",
                "max_score": "mean"
            }).reset_index()
            
            class_stats.columns = ["L·ªõp", "S·ªë h·ªçc vi√™n", "T·ªïng s·ªë b√†i n·ªôp", "ƒêi·ªÉm trung b√¨nh"]
            class_stats["ƒêi·ªÉm trung b√¨nh"] = class_stats["ƒêi·ªÉm trung b√¨nh"].round(2)
            
            # DataFrame th·ªëng k√™ l·ªõp
            df_class_stats = class_stats.copy()
            
            st.dataframe(
                class_stats,
                use_container_width=True,
                hide_index=True
            )
            
            # Bi·ªÉu ƒë·ªì c·ªôt nh·ªè h∆°n cho s·ªë h·ªçc vi√™n theo l·ªõp
            fig, ax = plt.subplots(figsize=(10, 4))
            ax.bar(class_stats["L·ªõp"], class_stats["S·ªë h·ªçc vi√™n"], color='skyblue')
            ax.set_xlabel("L·ªõp")
            ax.set_ylabel("S·ªë h·ªçc vi√™n")
            ax.set_title("S·ªë h·ªçc vi√™n theo l·ªõp")
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            st.pyplot(fig)
    
    with tab5:
        st.subheader("Xu·∫•t b√°o c√°o")
        
        # Hi·ªÉn th·ªã c√°c lo·∫°i b√°o c√°o c√≥ th·ªÉ xu·∫•t
        st.write("### 1. B√°o c√°o t·∫•t c·∫£ b√†i n·ªôp")
        st.markdown(get_download_link(df_all_submissions, "bao_cao_tat_ca_bai_nop.csv", 
                                      "T·∫£i xu·ªëng b√°o c√°o t·∫•t c·∫£ b√†i n·ªôp (CSV)"), unsafe_allow_html=True)
        
        st.write("### 2. B√°o c√°o th·ªëng k√™ c√¢u h·ªèi")
        st.markdown(get_download_link(df_questions, "bao_cao_thong_ke_cau_hoi.csv", 
                                     "T·∫£i xu·ªëng b√°o c√°o th·ªëng k√™ c√¢u h·ªèi (CSV)"), unsafe_allow_html=True)
        
        st.write("### 3. B√°o c√°o danh s√°ch h·ªçc vi√™n")
        st.markdown(get_download_link(df_students_list, "bao_cao_danh_sach_hoc_vien.csv", 
                                     "T·∫£i xu·ªëng danh s√°ch h·ªçc vi√™n (CSV)"), unsafe_allow_html=True)
        
        st.write("### 4. B√°o c√°o th·ªëng k√™ theo l·ªõp")
        st.markdown(get_download_link(df_class_stats, "bao_cao_thong_ke_lop.csv", 
                                     "T·∫£i xu·ªëng th·ªëng k√™ theo l·ªõp (CSV)"), unsafe_allow_html=True)
        
        st.write("### 5. B√°o c√°o t·ªïng h·ª£p (Excel)")
        
        try:
            # Chu·∫©n b·ªã danh s√°ch DataFrame v√† t√™n sheet
            dfs = [df_all_submissions, df_questions, df_students_list, df_class_stats]
            sheet_names = ["T·∫•t c·∫£ b√†i n·ªôp", "Th·ªëng k√™ c√¢u h·ªèi", "Danh s√°ch h·ªçc vi√™n", "Th·ªëng k√™ l·ªõp"]
            
            # Hi·ªÉn th·ªã link t·∫£i xu·ªëng
            st.markdown(export_to_excel(dfs, sheet_names, "bao_cao_tong_hop.xlsx"), unsafe_allow_html=True)
            
        except Exception as e:
            st.error(f"L·ªói khi t·∫°o file Excel: {str(e)}")
            st.info("B·∫°n c√≥ th·ªÉ c·∫ßn c√†i ƒë·∫∑t th∆∞ vi·ªán openpyxl b·∫±ng c√°ch th√™m v√†o requirements.txt")